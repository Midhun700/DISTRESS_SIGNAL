const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const app = express();
mongoose.connect('mongodb://localhost:27017/database.db', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});
const distressSignalSchema = new mongoose.Schema({
    type: String,
    location: String,
    timestamp: { type: Date, default: Date.now }
});

const DistressSignal = mongoose.model('DistressSignal', distressSignalSchema);


app.use(bodyParser.json());

// Open SQLite database connection
const db = new sqlite3.Database('distress_db.sqlite');

// Endpoint to generate distress signal
app.post('/distress', (req, res) => {
  const { username, distressLocation } = req.body;

  // Find nearby police stations and local helpers
  db.all(`SELECT * FROM police_stations WHERE ABS(location_x - ${distressLocation.x}) <= 1 AND ABS(location_y - ${distressLocation.y}) <= 1`, (err, policeStations) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: 'Internal Server Error' });
    }

    db.all(`SELECT * FROM local_helpers WHERE ABS(location_x - ${distressLocation.x}) <= 1 AND ABS(location_y - ${distressLocation.y}) <= 1`, (err, localHelpers) => {
      if (err) {
        console.error(err);
        return res.status(500).json({ error: 'Internal Server Error' });
      }

      // Send notifications to nearby police stations and local helpers
      notifyNearbyUsers(username, distressLocation, policeStations, localHelpers);

      res.status(200).json({ message: 'Distress signal sent successfully' });
    });
  });
});

// Helper function to notify nearby users (simulated)
function notifyNearbyUsers(username, distressLocation, policeStations, localHelpers) {
  console.log(`Distress signal generated by ${username} at location (${distressLocation.x}, ${distressLocation.y})`);
  console.log('Notifying nearby police stations:');
  console.log(policeStations);
  console.log('Notifying nearby local helpers:');
  console.log(localHelpers);
  // Implement actual notification logic here (e.g., send emails, SMS, or push notifications)
}

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
